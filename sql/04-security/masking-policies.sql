-- Create masking policies
CREATE OR REPLACE MASKING POLICY SIN_MASK AS (val STRING) RETURNS STRING ->
    CASE 
        WHEN CURRENT_ROLE() IN ('COMPLIANCE_OFFICER') THEN val
        ELSE 'XXX-XXX-' || RIGHT(val, 3)
    END;

CREATE ORE REPLACE MASKING POLICY EMAIL_MASK AS (val STRING) RETURNS STRING ->
    CASE 
        WHEN CURRENT_ROLE() IN ('COMPLIANCE_OFFICER') THEN val
        ELSE REGEXP_REPLACE(val, '^(.{2}).*(@.*)$', '\\1****\\2')
    END;

CREATE OR REPLACE MASKING POLICY PHONE_MASK AS (val STRING) RETURNS STRING ->
    CASE 
        WHEN CURRENT_ROLE() IN ('COMPLIANCE_OFFICER', 'DATA_ENGINEER', 'SYSADMIN') THEN val 
        WHEN CURRENT_ROLE() IN ('RISK_MANAGER') THEN 
            CASE WHEN val IS NOT NULL THEN 'XXX-XXX-' || RIGHT(val, 4) ELSE NULL END 
        ELSE 'XXX-XXX-XXXX'
    END 
    COMMENT = 'Mask phone numbers showing only last 4 digits for risk analysis';

-- Apply masking policies to staging data
ALTER TABLE BANKING_STAGING.STG_CUSTOMER.CUSTOMER_PROFILES_STG 
    MODIFY COLUMN sin SET MASKING POLICY SIN_MASK;

ALTER TABLE BANKING_STAGING.STG_CUSTOMER.CUSTOMER_PROFILES_STG 
    MODIFY COLUMN email SET MASKING POLICY EMAIL_MASK;

-- Apply masking policies to raw data
ALTER TABLE BANKING_RAW.customer_data.customer_profiles
    MODIFY COLUMN sin SET MASKING POLICY SIN_MASK;

ALTER TABLE BANKING_RAW.customer_data.customer_profiles
    MODIFY COLUMN email SET MASKING POLICY EMAIL_MASK;

ALTER TABLE BANKING_RAW.customer_data.customer_profiles
    MODIFY COLUMN phone SET MASKING POLICY PHONE_MASK;